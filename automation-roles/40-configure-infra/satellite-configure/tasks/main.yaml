---
- name: wait for all hosts to become ready
  include_tasks: sat-hosts-wait.yaml
  vars:
    _host: "{{item}}"
  loop: "{{ sat_hosts_cp + sat_hosts_ocp }}"

- name: get zones
  block:
    - name: query location
      command: ibmcloud sat location get --location {{all_config.satellite[0].name}} --output json -q
      register: output
    - name: set zones
      set_fact:
        _zones: "{{output.stdout | from_json | json_query('workerZones')}}"
    - name: test
      debug:
        var: _zones

- name: assign hosts to control plane
  include_tasks: sat-assign-cp.yaml
  vars:
    cp_host: "{{item}}"
    zone: "{{_zones[hostvars[item]['sat_host']['sat_zone_idx'] | int - 1]}}"
  loop: "{{ sat_hosts_cp }}"

- name: get ROKS cluster id
  block:
    - name: get clusters
      command: ibmcloud sat cluster ls --output json -q
      register: output

    - set_fact:
        _cluster_id: "{{ output.stdout | from_json | json_query(query) }}"
      vars:
        query: "clusterSearch[?registration.name == '{{all_config.satellite[0].name}}-roks']"

    - set_fact:
        _cluster_id: "{{(_cluster_id | first).registration.clusterId}}"
      when: _cluster_id | length > 0

- name: create cluster
  block:
  - name: wait for location being ready to deploy
    command: ibmcloud sat location get --location {{all_config.satellite[0].name}} --output json -q
    register: output
    until: output.stdout | from_json | json_query(query) == True
    vars:
      query: "deployments.enabled"
    retries: 250
    delay: 10

  - name: create cluster
    command: >
      ibmcloud oc cluster create satellite --location {{all_config.satellite[0].name}} 
        --name {{all_config.satellite[0].name}}-roks --version {{all_config.satellite[0].services.openshift.version}}_openshift
        --enable-config-admin --operating-system {{all_config.satellite[0].services.openshift.os}}
  when: _cluster_id == []

- name: wait for cluster
  command: ibmcloud sat cluster ls --output json -q
  register: output
  until:  output.stdout | from_json | json_query(query) | length > 0
  vars:
    query: "clusterSearch[?registration.name == '{{all_config.satellite[0].name}}-roks'].clusterId"
  retries: 50
  delay: 10

- name: set ROKS cluster id
  set_fact:
    _cluster_id: "{{ output.stdout | from_json | json_query(query) | first }}"
  vars:
    query: "clusterSearch[?registration.name == '{{all_config.satellite[0].name}}-roks'].registration.clusterId"

- name: assign zones to ROKS worker pool
  include_tasks: sat-assign-zones.yaml
  vars:
    cluster_name: "{{all_config.satellite[0].name}}-roks"
    zone: "{{item}}"
  loop: "{{ _zones }}"

- name: assign workers to ROKS
  include_tasks: sat-assign-roks.yaml
  vars:
    roks_host: "{{item}}"
    cluster_name: "{{all_config.satellite[0].name}}-roks"
    zone: "{{_zones[hostvars[item]['sat_host']['sat_zone_idx'] | int - 1]}}"
  loop: "{{ sat_hosts_ocp }}"

- name: attach volumes to odf nodes
  include_tasks: sat-host-attach-vol.yaml
  vars:
    roks_host: "{{ item }}"
  loop: "{{ sat_hosts_ocp }}"

- name: create storage
  block:
  - name: create storage
    include_tasks: sat-storage.yaml
  
  - name: activate ocp image registry
    include_tasks: sat-ocp-registry.yaml
  
  when: all_config['satellite'][0]['services'] is defined and
        all_config['satellite'][0]['services']['openshift'] is defined and
        all_config['satellite'][0]['services']['openshift']['storage'] is defined
