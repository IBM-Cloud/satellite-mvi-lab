---
- name: Create downloads directory
  file:
    path: "{{ status_dir }}/downloads"
    state: directory

- debug:
    var: ansible_architecture

- name: Download Terraform for amd64
  block:
  - name: Check if terraform was already downloaded
    stat:
      path: "{{ status_dir }}/downloads/terraform_linux_amd64.zip"
    register: _terraform_download
  
  - shell: |
      TER_VER=$(curl -s https://api.github.com/repos/hashicorp/terraform/releases/latest | \
        jq -r .tag_name | cut -dv -f2) && \
      wget -nv https://releases.hashicorp.com/terraform/${TER_VER}/terraform_${TER_VER}_linux_amd64.zip \
        -O {{ status_dir }}/downloads/terraform_linux_amd64.zip
    args:
      warn: False
    when: not _terraform_download.stat.exists

  - name: Unpack Terraform from {{ status_dir }}/downloads/terraform_linux_amd64.zip
    unarchive:
      src: "{{ status_dir }}/downloads/terraform_linux_amd64.zip"
      dest: "/usr/local/bin"
  when:
    ansible_architecture == "amd64"

- name: Download Terraform for arm64
  block:
  - name: Check if terraform was already downloaded
    stat:
      path: "{{ status_dir }}/downloads/terraform_linux_arm64.zip"
    register: _terraform_download

  - shell: |
      TER_VER=$(curl -s https://api.github.com/repos/hashicorp/terraform/releases/latest | \
        jq -r .tag_name | cut -dv -f2) && \
      wget -nv https://releases.hashicorp.com/terraform/${TER_VER}/terraform_${TER_VER}_linux_arm64.zip \
        -O {{ status_dir }}/downloads/terraform_linux_arm64.zip
    args:
      warn: False
    when: not _terraform_download.stat.exists

  - name: Unpack Terraform from {{ status_dir }}/downloads/terraform_linux_arm64.zip
    unarchive:
      src: "{{ status_dir }}/downloads/terraform_linux_arm64.zip"
      dest: "/usr/local/bin"
  when:
    ansible_architecture == "aarch64"

- name: Get Terraform version
  shell: |
    terraform version
  register: _terraform_version

- name: Show Terraform version
  debug:
    var: _terraform_version.stdout